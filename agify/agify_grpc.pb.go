// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: agify/agify.proto

package agify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgifyClient is the client API for Agify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgifyClient interface {
	GetEstimatedAge(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Age, error)
	GetCount(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Count, error)
}

type agifyClient struct {
	cc grpc.ClientConnInterface
}

func NewAgifyClient(cc grpc.ClientConnInterface) AgifyClient {
	return &agifyClient{cc}
}

func (c *agifyClient) GetEstimatedAge(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Age, error) {
	out := new(Age)
	err := c.cc.Invoke(ctx, "/agify.Agify/GetEstimatedAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agifyClient) GetCount(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/agify.Agify/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgifyServer is the server API for Agify service.
// All implementations must embed UnimplementedAgifyServer
// for forward compatibility
type AgifyServer interface {
	GetEstimatedAge(context.Context, *Person) (*Age, error)
	GetCount(context.Context, *Person) (*Count, error)
	mustEmbedUnimplementedAgifyServer()
}

// UnimplementedAgifyServer must be embedded to have forward compatible implementations.
type UnimplementedAgifyServer struct {
}

func (UnimplementedAgifyServer) GetEstimatedAge(context.Context, *Person) (*Age, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimatedAge not implemented")
}
func (UnimplementedAgifyServer) GetCount(context.Context, *Person) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (UnimplementedAgifyServer) mustEmbedUnimplementedAgifyServer() {}

// UnsafeAgifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgifyServer will
// result in compilation errors.
type UnsafeAgifyServer interface {
	mustEmbedUnimplementedAgifyServer()
}

func RegisterAgifyServer(s grpc.ServiceRegistrar, srv AgifyServer) {
	s.RegisterService(&Agify_ServiceDesc, srv)
}

func _Agify_GetEstimatedAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgifyServer).GetEstimatedAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agify.Agify/GetEstimatedAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgifyServer).GetEstimatedAge(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agify_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgifyServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agify.Agify/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgifyServer).GetCount(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

// Agify_ServiceDesc is the grpc.ServiceDesc for Agify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agify.Agify",
	HandlerType: (*AgifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEstimatedAge",
			Handler:    _Agify_GetEstimatedAge_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _Agify_GetCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agify/agify.proto",
}
